This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-07T22:31:17.416Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  index.ts
  types.ts
.gitignore
package.json
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: src/index.ts
================
import { TwitterServiceConfig, MentionEvent, Message, ThreadContext } from "./types";
import winston from "winston";
import express, { Express, Request, Response } from "express";
import { EventEmitter } from "events";
import { TwitterApi } from "twitter-api-v2";

export class TwitterService {
  private config: TwitterServiceConfig;
  private logger: winston.Logger;
  private app: Express;
  private emitter: EventEmitter;
  private twitterClient: TwitterApi;
  private threads: Map<string, ThreadContext>;

  public on: (event: string | symbol, listener: (...args: any[]) => void) => EventEmitter;
  public emit: (event: string | symbol, ...args: any[]) => boolean;

  constructor(config: TwitterServiceConfig) {
    this.config = config;
    this.threads = new Map();
    this.emitter = new EventEmitter();
    this.app = express();

    // Bind event emitter methods
    this.on = this.emitter.on.bind(this.emitter);
    this.emit = this.emitter.emit.bind(this.emitter);

    // Initialize logger with timestamp
    this.logger = winston.createLogger({
      level: "info",
      format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.printf(({ level, message, timestamp, ...meta }) => {
          return `${timestamp} [${level}]: ${message} ${
            Object.keys(meta).length ? JSON.stringify(meta) : ""
          }`;
        })
      ),
      transports: [new winston.transports.Console()],
    });

    // Initialize Twitter client
    this.twitterClient = config.bearerToken
      ? new TwitterApi(config.bearerToken)
      : new TwitterApi({
          appKey: config.apiKey,
          appSecret: config.apiSecret,
        });
  }

  public async start() {
    this.app.use(express.json());
    this.app.post("/webhook", this.webhook.bind(this));

    this.app.listen(this.config.webhookPort, () => {
      this.logger.info(`Server is running on port ${this.config.webhookPort}`);
    });

    this.logger.info("Twitter service started");
  }

  private async webhook(req: Request, res: Response) {
    res.status(200).send("OK");
    this.handleMention(req.body);
  }

  private async handleMention(mention: any) {
    this.logger.info("received webhook", mention);

    if (mention?.tweet?.text) {
      this.logger.info("Valid Mention", {
        text: mention.tweet.text,
        id: mention.tweet.id,
      });

      const mentionEvent: MentionEvent = {
        message: mention.tweet.text,
        threadId: mention.tweet.conversation_id,
        userId: mention.tweet.author_id,
        tweetId: mention.tweet.id,
      };

      // Add message to thread context
      this.addMessageToThread(mentionEvent.threadId, {
        senderId: mentionEvent.userId,
        timestamp: Date.now(),
        content: mentionEvent.message,
      });

      this.emit("newMention", mentionEvent);
    } else {
      this.logger.warn("Invalid Mention", mention);
    }
  }

  private async replyToTweet(tweetId: string, message: string) {
    try {
      const response = await this.twitterClient.v2.reply(message, tweetId);
      this.logger.info("Successfully responded to tweet", {
        tweetId,
        message,
        response,
      });
    } catch (error: any) {
      if (error?.rateLimitError) {
        this.logger.warn("Rate limited when attempting to respond to tweet", {
          tweetId,
          message,
          error,
        });
      } else {
        this.logger.error("Failed to respond to tweet", {
          tweetId,
          message,
          error,
        });
      }
    }
  }

  private getThreadContext(threadId: string): ThreadContext {
    if (this.threads.has(threadId)) {
      return this.threads.get(threadId)!;
    } else {
      const newThread = { threadId: threadId, history: [] };
      this.threads.set(threadId, newThread);
      return newThread;
    }
  }

  private addMessageToThread(threadId: string, message: Message) {
    const threadContext = this.getThreadContext(threadId);
    threadContext.history.push(message);
  }
}

================
File: src/types.ts
================
export interface TwitterServiceConfig {
  apiKey: string;
  apiSecret: string;
  webhookPort: number;
  bearerToken?: string;
}

export interface MentionEvent {
  threadId: string;
  userId: string;
  message: string;
  tweetId: string;
}

export interface Message {
  senderId: string;
  timestamp: number;
  content: string;
}

export interface ThreadContext {
  threadId: string;
  history: Message[];
}

================
File: .gitignore
================
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Build output
dist/
build/

# Environment variables
.env
.env.local
.env.*.local

# IDE and editor files
.idea/
.vscode/
*.swp
*.swo
.DS_Store

# Logs
logs/
*.log

# Test coverage
coverage/

================
File: package.json
================
{
  "name": "@dao-bot/twitter-service",
  "version": "1.0.0",
  "description": "Twitter service for DAO Bot",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "scripts": {
    "build": "tsc",
    "start": "node dist/index.js",
    "prepublishOnly": "npm run build",
    "dev": "tsc -w",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "twitter",
    "dao",
    "bot"
  ],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "express": "^4.21.2",
    "twitter-api-v2": "^1.19.0",
    "winston": "^3.17.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/express": "^5.0.0",
    "@types/node": "^22.10.5",
    "typescript": "^5.7.2"
  }
}

================
File: README.md
================
# @dao-bot/twitter-service

A Twitter service for DAO Bot that handles Twitter API interactions, webhook processing, and thread context management.

## Installation

```bash
npm install @dao-bot/twitter-service
```

## Setup

1. Create a Twitter Developer Account and set up a Project
   - Go to [Twitter Developer Portal](https://developer.twitter.com/en/portal/dashboard)
   - Create a new Project and App
   - Get your API Key and API Secret
   - Set up OAuth 2.0 credentials
   - (Optional) Generate a Bearer Token

2. Configure your environment
   - Set up a webhook endpoint that's publicly accessible
   - Ensure your server can receive POST requests at your webhook URL

## Usage

```typescript
import { TwitterService } from '@dao-bot/twitter-service';

// Initialize the service
const twitterService = new TwitterService({
  apiKey: 'your_api_key',
  apiSecret: 'your_api_secret',
  webhookPort: 3000,
  // Optional: bearerToken: 'your_bearer_token'
});

// Handle new mentions
twitterService.on('newMention', async (mentionEvent) => {
  console.log('New mention:', mentionEvent);
  // Handle the mention event
  // mentionEvent contains:
  // - threadId: string
  // - userId: string
  // - message: string
  // - tweetId: string
});

// Start the service
await twitterService.start();
```

## Features

- Webhook endpoint for receiving Twitter events
- Event-based architecture for handling mentions
- Thread context management
- Rate limit handling
- Structured logging
- TypeScript support

## Types

### TwitterServiceConfig
```typescript
interface TwitterServiceConfig {
  apiKey: string;
  apiSecret: string;
  webhookPort: number;
  bearerToken?: string;
}
```

### MentionEvent
```typescript
interface MentionEvent {
  threadId: string;
  userId: string;
  message: string;
  tweetId: string;
}
```

### Message
```typescript
interface Message {
  senderId: string;
  timestamp: number;
  content: string;
}
```

### ThreadContext
```typescript
interface ThreadContext {
  threadId: string;
  history: Message[];
}
```

## Development

```bash
# Install dependencies
npm install

# Build the project
npm run build

# Start in development mode
npm run dev

# Build and start
npm start
```

## License

ISC

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "CommonJS",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true,
    "outDir": "./dist",
    "sourceMap": true,
    "moduleResolution": "node",
    "declaration": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
